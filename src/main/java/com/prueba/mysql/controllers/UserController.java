package com.prueba.mysql.controllers;

import com.prueba.mysql.models.User;
import com.prueba.mysql.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;


@Controller    // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
//    private UserRepository userRepository;
    private UserService service;

    @GetMapping(path = "")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return service.findAll();
    }

    @GetMapping(path = "/create") // Map ONLY GET Requests
    @ResponseBody
    public String create(@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        service.insert(n);
        return "Saved";
    }

    @GetMapping(path = "/{id}")
    @ResponseBody
    public User read(@PathVariable int id) {
        // This returns a JSON or XML with the users
        return service.findById(id);
    }

    @PostMapping(path = "/delete/{id}")
    @ResponseBody
    public String delete(@PathVariable int id) {
        // This returns a JSON or XML with the users
        service.deleteById(id);
        return "Delete user: [" + id + "]";
    }

    @PostMapping(path = "/update/{id}")
    @ResponseBody
    public User update(@PathVariable int id, @RequestParam Optional<String> name, @RequestParam Optional<String> email) {
        // This returns a JSON or XML with the users
        User user = service.findById(id);
        if (name.isPresent()) user.setName(name.get());
        if (email.isPresent()) user.setName(email.get());
        service.update(user);
        return user;
    }
}