package com.prueba.mysql.controllers;

import com.prueba.mysql.models.Room;
import com.prueba.mysql.models.RoomCategory;
import com.prueba.mysql.models.Table;
import com.prueba.mysql.services.RoomService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping(path = "/room")
public class RoomControler {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
//    private UserRepository userRepository;
    private RoomService service;

    @GetMapping(path = "")
    @ResponseBody
    public Iterable<Room> getAllRooms() {
        // This returns a JSON or XML with the users
        return service.findAllRooms();
    }

    @GetMapping(path = "/{id}/category")
    @ResponseBody
    public Iterable<Room> getRoomsByCategoryId(@PathVariable Long id) {
        // This returns a JSON or XML with the users
        return service.findRoomsByCategoryId(id);
    }

    @GetMapping(path = "/{id}/tables")
    @ResponseBody
    public Iterable<Table> getRoomAllTables(@PathVariable Long id) {
        // This returns a JSON or XML with the users
        return service.findTablesByRoomId(id);
    }

    @GetMapping(path = "/{id}/tables/available")
    @ResponseBody
    public Iterable<Table> getRoomTablesByAvailable(@PathVariable Long id) {
        // This returns a JSON or XML with the users
        return service.findTablesByRoomIdAndAvail(id, true);
    }

    @GetMapping(path = "/{id}/tables/unavailable")
    @ResponseBody
    public Iterable<Table> getRoomTablesByUnavailable(@PathVariable Long id) {
        // This returns a JSON or XML with the users
        return service.findTablesByRoomIdAndAvail(id, false);
    }


    @GetMapping(path = "/create") // Map ONLY GET Requests
    @ResponseBody
    public ResponseEntity<?> create(@RequestParam String name
            , @RequestParam Long id_category) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            RoomCategory category = service.findCategoryById(id_category);
            Room room = new Room();
            room.setName(name);
            room.setRoomCategory(category);
            service.insertRoom(room);
            return ResponseEntity.accepted().build();
        } catch (Exception ex) {
            return ResponseEntity.badRequest().build();
        }
    }


    /*    CATEGORIES    */

    @GetMapping(path = "/category")
    @ResponseBody
    public Iterable<RoomCategory> getAllCategories() {
        // This returns a JSON or XML with the users
        return service.findAllCategories();
    }

    @GetMapping(path = "/category/{id}/rooms")
    @ResponseBody
    public Iterable<Room> getCategoryAllRooms(@PathVariable Long id) {
        // This returns a JSON or XML with the users
        return service.findCategoryRooms(id);
    }

    @PostMapping(path = "/category/create") // Map ONLY GET Requests
    @ResponseBody
    public ResponseEntity<?> createCategory(@RequestParam String category,
                                            @RequestParam String description) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            RoomCategory cat = new RoomCategory();
            cat.setCategory(category);
            cat.setDescription(description);
            service.insertCategory(cat);
            return ResponseEntity.accepted().build();
        } catch (Exception ex) {
            return ResponseEntity.notFound().build();
        }

    }

    /*    TABLES    */

    @PostMapping(path = "/{id}/table/create")
    @ResponseBody
    public ResponseEntity<Table> createTable(@PathVariable Long id, @RequestParam  String name) {
        // This returns a JSON or XML with the users
        Room room = service.findRoomById(id);
        Table table = new Table();
        table.setRoom(room);
        table.setName(name);
        table.setAvailable(true);
        return ResponseEntity.of(Optional.of(service.insertOrUpdateTable(table)));
    }



    @PostMapping(path = "/{room_id}/table/{id}/avail") // Map ONLY GET Requests
    @ResponseBody
    public ResponseEntity<?> changeAvailTable(@PathVariable Long id, @PathVariable Long room_id) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            service.changeAvailableTable(id, room_id);
            return ResponseEntity.accepted().build();
        } catch (Exception ex) {
            return ResponseEntity.notFound().build();
        }

    }


//
//    @GetMapping(path = "/{id}")
//    @ResponseBody
//    public User read(@PathVariable int id) {
//        // This returns a JSON or XML with the users
//        return service.findById(id);
//    }
//
//    @PostMapping(path = "/delete/{id}")
//    @ResponseBody
//    public String delete(@PathVariable int id) {
//        // This returns a JSON or XML with the users
//        service.deleteById(id);
//        return "Delete user: [" + id + "]";
//    }
//
//    @PostMapping(path = "/update/{id}")
//    @ResponseBody
//    public User update(@PathVariable int id, @RequestParam Optional<String> name, @RequestParam Optional<String> email) {
//        // This returns a JSON or XML with the users
//        User user = service.findById(id);
//        if (name.isPresent()) user.setName(name.get());
//        if (email.isPresent()) user.setName(email.get());
//        service.update(user);
//        return user;
//    }
}
